esphome:
  name: esp32-c3-nat
  friendly_name: esp32-c3-nat

  # Ya no necesitas "includes: - nat_ap.h" aquí
  # Las platformio_options también se manejan en __init__.py ahora
  # La lambda en on_boot también se va

esp32:
  board: esp32-c3-devkitm-1
  cpu_frequency: 160MHZ
  framework:
    type: esp-idf
    # Las sdkconfig_options mínimas necesarias para el componente se añaden en __init__.py
    # Puedes mantener aquí otras optimizaciones o configuraciones no relacionadas con el NAT
    sdkconfig_options:
      CONFIG_COMPILER_OPTIMIZATION_SIZE: y
 
# Habilitar logging
logger:
  level: DEBUG

# Habilitar la API de Home Assistant
api:
  encryption:
    key: ""
  reboot_timeout: 0s
    
ota:
  - platform: esphome
    password: ""

# Configuración de Wi-Fi para la conexión STA (gestionada por ESPHome)
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # No es necesario configurar "ap:" aquí, tu componente NatAp lo gestiona.

# --- ¡Aquí es donde configuras tu componente NAT AP! ---
nat_ap:
  ap_ssid: "MiAP_ESPHome"
  ap_password: "MiContrasenaSegura"
  ap_ip_address: "192.168.20.1" # Por ejemplo, una nueva subred
  hide_ssid: false # O true para ocultarlo

  port_forwarding:
    # Redirigir el puerto TCP 8080 externo a la IP interna 192.168.20.10, puerto 80
    - protocol: TCP
      external_port: 8080
      internal_ip: "192.168.20.10"
      internal_port: 80
    
    # Redirigir el puerto UDP 12345 externo a la IP interna 192.168.20.20, puerto 54321
    - protocol: UDP
      external_port: 12345
      internal_ip: "192.168.20.20"
      internal_port: 54321

    # Redirigir tanto TCP como UDP del puerto 5000 externo a la IP interna 192.168.20.30, puerto 5000
    - protocol: TCP_UDP
      external_port: 5000
      internal_ip: "192.168.20.30"
      internal_port: 5000
